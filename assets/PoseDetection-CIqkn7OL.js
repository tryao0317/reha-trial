import{r as t,_ as A,j as p}from"./index-BS5mA4Kt.js";let _,v,C;const j=({setDebugInfo:f,setError:a,onPoseResults:m})=>{const r=t.useRef(null),n=t.useRef(null),b=t.useRef(null),o=t.useRef(null),h=t.useRef(null),s=t.useRef(null),u=t.useRef(!0),[g,F]=t.useState(!1),[w,x]=t.useState(!1),i=t.useCallback(e=>{const c=new Date().toLocaleTimeString();console.log(`[PoseDetection] ${e}`),f&&f(d=>[...d.slice(-9),`${c}: ${e}`])},[f]);t.useEffect(()=>()=>{u.current=!1,h.current&&h.current.getTracks().forEach(e=>e.stop()),o.current&&o.current.close(),s.current&&cancelAnimationFrame(s.current)},[]);const R=t.useCallback(async()=>{try{i("Requesting camera access...");const e=await navigator.mediaDevices.getUserMedia({video:!0});h.current=e,r.current&&(r.current.srcObject=e,await r.current.play()),x(!0),i("Camera is ready.")}catch(e){a&&a("カメラの起動に失敗しました"),console.error("Camera error:",e)}},[a,i]),k=t.useCallback(async()=>{try{i("Starting MediaPipe Tasks Vision initialization...");const e=await A(()=>import("./vision_bundle-DieMjNca.js"),[]);_=e.FilesetResolver,v=e.PoseLandmarker,C=e.DrawingUtils,i("MediaPipe modules imported successfully");const c=await _.forVisionTasks("/reha-trial/wasm");i("FilesetResolver initialized with CDN WASM path"),o.current=await v.createFromOptions(c,{baseOptions:{modelAssetPath:"https://storage.googleapis.com/mediapipe-models/pose_landmarker/pose_landmarker_lite/float16/1/pose_landmarker_lite.task"},runningMode:"VIDEO",numPoses:1}),i("PoseLandmarker created successfully"),F(!0),a(null)}catch(e){console.error("MediaPipe init error:",e),a&&a(`MediaPipe初期化エラー: ${e.message||e}`),i(`MediaPipe initialization failed: ${e.message||e}`)}},[a,i]),l=t.useCallback(async()=>{if(!(!u.current||!o.current||!r.current||!n.current)){if(r.current.readyState<2){s.current=requestAnimationFrame(l);return}if(r.current.videoWidth===0||r.current.videoHeight===0){s.current=requestAnimationFrame(l);return}try{const e=performance.now(),c=await o.current.detectForVideo(r.current,e);if(!u.current)return;if(c&&c.landmarks){m&&m(c);const d=n.current.getContext("2d");if(d&&n.current){d.clearRect(0,0,n.current.width,n.current.height);const P=new C(d);for(const y of c.landmarks)P.drawLandmarks(y,{color:"red",radius:3}),P.drawConnectors(y,v.POSE_CONNECTIONS,{color:"lime",lineWidth:2})}}}catch(e){console.error("Pose detection error:",e),a&&a(`姿勢検出エラー: ${e.message||e}`)}u.current&&(s.current=requestAnimationFrame(l))}},[m,a]);return t.useEffect(()=>{R(),k()},[R,k]),t.useEffect(()=>{g&&w&&u.current&&r.current&&n.current&&r.current.videoWidth>0&&r.current.videoHeight>0&&(n.current.width=r.current.videoWidth,n.current.height=r.current.videoHeight,s.current&&cancelAnimationFrame(s.current),s.current=requestAnimationFrame(l))},[g,w,l]),p.jsxs("div",{ref:b,className:"relative w-full bg-black",style:{height:"384px"},children:[p.jsx("video",{ref:r,className:"absolute inset-0 w-full h-full object-cover",autoPlay:!0,playsInline:!0,muted:!0}),p.jsx("canvas",{ref:n,className:"absolute inset-0 w-full h-full object-cover"})]})};export{j as default};
